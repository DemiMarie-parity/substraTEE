pipeline {
    agent {
        docker {
            image 'repository.scs-ad.scs.ch/substratee-docker-dev-local/substratee_generic:latest'
            args '-u root:root'
        }
    }
    parameters {
        string(
            name: 'substrate_api_client_revision',
            defaultValue: 'HEAD',
            description: 'Revision or branch of substrate-api-client to use. Prepend b_ for branch name'
        )
    }
    options {
        timeout(time: 2, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timestamps()
    }
    stages {
        stage('Inside Docker') {
            steps {
                echo sh(returnStdout: true, script: 'env')
                echo sh(returnStdout: true, script: 'echo $0')
                echo sh(returnStdout: true, script: '/root/.cargo/bin/rustup show')

                script {
                    // remove old directories and clone fresh copy
                    sh "rm -rf substratee-node substratee-worker"

                    echo "clone substraTEE-node and substraTEE-worker"
                    sh "git clone https://github.com/scs/substratee-node substratee-node"
                    sh "git clone https://github.com/scs/substratee-worker substratee-worker"

                    // change dependencies
                    if ( params.substrate_api_client_revision == "HEAD" ) {
                        echo "don't change dependencies on substrate_api_client"
                    } else {
                        echo "change dependencies on substrate_api_client to ${params.substrate_api_client_revision}"
                        sh "./scripts/change-deps.py substratee-worker substrate-api-client ${params.substrate_api_client_revision}"
                        // sh './scripts/change-deps.py substratee-node substrate-api-client ${params.substrate_api_client_revision} > change_deps_node.log'
                    }

                    // init the rust environment
                    sh "source /opt/sgxsdk/environment"
                    // sh "source /root/.cargo/env"
                    // sh "/substraTEE/substratee-node/scripts/init.sh"

                    // build the substraTEE-node
                    // sh "cd /substratee-node && cargo build --release"
                }
                sh "ls -la"
            }
        }
    }
}