# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License..
#
# Copyright 2020 Supercomputing Systems AG

FROM ubuntu:18.04
LABEL MAINTAINER="Yu Ding"

# Intel SGX files
ENV sdk_bin https://download.01.org/intel-sgx/sgx-linux/2.7.1/distro/ubuntu18.04-server/sgx_linux_x64_sdk_2.7.101.3.bin
ENV psw_deb https://download.01.org/intel-sgx/sgx-linux/2.7.1/distro/ubuntu18.04-server/libsgx-enclave-common_2.7.101.3-bionic1_amd64.deb
ENV psw_dev_deb https://download.01.org/intel-sgx/sgx-linux/2.7.1/distro/ubuntu18.04-server/libsgx-enclave-common-dev_2.7.101.3-bionic1_amd64.deb
ENV psw_dbgsym_deb https://download.01.org/intel-sgx/sgx-linux/2.7.1/distro/ubuntu18.04-server/libsgx-enclave-common-dbgsym_2.7.101.3-bionic1_amd64.ddeb

# rust toolchain
ENV rust_toolchain nightly-2019-11-25

# misc variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TERM xterm

SHELL ["/bin/bash", "-c"]

# prepare the linux system
RUN apt-get update && \
    apt-get install -y --no-install-recommends\
    build-essential ocaml ocamlbuild automake autoconf \
    libtool wget python libssl-dev libcurl4-openssl-dev protobuf-compiler \
    libprotobuf-dev kmod vim curl git-core libprotobuf-c0-dev \
    libboost-thread-dev libboost-system-dev liblog4cpp5-dev libjsoncpp-dev \
    alien uuid-dev libxml2-dev cmake pkg-config expect systemd-sysv gdb unzip \
    clang libclang-dev rsync ca-certificates && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /var/cache/apt/archives/*

# install the Intel SGX PSW and SDK
RUN mkdir /root/sgx && \
    mkdir /etc/init && \
    wget -O /root/sgx/psw.deb ${psw_deb} && \
    wget -O /root/sgx/psw_dev.deb ${psw_dev_deb} && \
    wget -O /root/sgx/psw_dbgsym.deb ${psw_dbgsym_deb} && \
    wget -O /root/sgx/sdk.bin ${sdk_bin} && \
    cd /root/sgx && \
    dpkg -i /root/sgx/psw.deb && \
    dpkg -i /root/sgx/psw_dev.deb && \
    dpkg -i /root/sgx/psw_dbgsym.deb && \
    chmod +x /root/sgx/sdk.bin && \
    echo -e 'no\n/opt' | /root/sgx/sdk.bin && \
    echo 'source /opt/sgxsdk/environment' >> /root/.bashrc && \
    rm -rf /root/sgx/*

# installing rust-sgx-sdk
RUN wget 'https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init' -O /root/rustup-init && \
    chmod +x /root/rustup-init && \
    echo '1' | /root/rustup-init --default-toolchain ${rust_toolchain} && \
    echo 'source /root/.cargo/env' >> /root/.bashrc && \
    /root/.cargo/bin/rustup component add rust-src && \
    HI=$(/root/.cargo/bin/rustup which rustc) && HI=${HI%/bin/rustc} && export TOOLCHAIN_DIR=$HI && echo TOOLCHAIN_DIR=$TOOLCHAIN_DIR && \
    rm -rf $TOOLCHAIN_DIR/share/doc && \
    rm -rf $TOOLCHAIN_DIR/share/man && \
    rm -rf /root/.cargo/registry && rm -rf /root/.cargo/git
    # /root/.cargo/bin/cargo install xargo && \

# install ipfs
RUN mkdir /ipfs && \
    cd ipfs && \
    wget -O go-ipfs.tar.gz https://dist.ipfs.io/go-ipfs/v0.4.21/go-ipfs_v0.4.21_linux-amd64.tar.gz && \
    tar xvfz go-ipfs.tar.gz && \
    cd go-ipfs && \
    ./install.sh

WORKDIR /substraTEE

# start the docker image with the following command
#   docker run -ti -v .:/substraTEE substratee
